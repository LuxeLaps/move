module playground::main {
    use std::signer;
    use aptos_framework::event;

    /// Event type for logging
    struct MessageEvent has drop, store {
        message: vector<u8>,
    }

    struct Balance has key {
        amount: u64,
    }

    struct EventStore has key {
        handle: event::EventHandle<MessageEvent>,
    }

    /// Initialize event store for an account
    public entry fun init(account: &signer) {
        let store = EventStore {
            handle: event::new_event_handle<MessageEvent>(account),
        };
        move_to(account, store);
    }

    /// Simple hello event
    public entry fun hello(account: &signer) {
        let store = borrow_global_mut<EventStore>(signer::address_of(account));
        event::emit_event(&mut store.handle, MessageEvent { message: b"Hello from Move!" });
    }

    /// Mint tokens to caller
    public entry fun mint_token(account: &signer, amount: u64) {
        if (!exists<Balance>(signer::address_of(account))) {
            move_to(account, Balance { amount });
        } else {
            let bal = borrow_global_mut<Balance>(signer::address_of(account));
            bal.amount = bal.amount + amount;
        }
        let store = borrow_global_mut<EventStore>(signer::address_of(account));
        event::emit_event(&mut store.handle, MessageEvent { message: b"Minted tokens" });
    }

    /// Transfer tokens between accounts
    public entry fun transfer_token(sender: &signer, recipient: address, amount: u64) {
        let sender_bal = borrow_global_mut<Balance>(signer::address_of(sender));
        assert!(sender_bal.amount >= amount, 1);
        sender_bal.amount = sender_bal.amount - amount;

        if (!exists<Balance>(recipient)) {
            move_to(&signer::borrow_address(&recipient), Balance { amount });
        } else {
            let rec_bal = borrow_global_mut<Balance>(recipient);
            rec_bal.amount = rec_bal.amount + amount;
        }

        let store = borrow_global_mut<EventStore>(signer::address_of(sender));
        event::emit_event(&mut store.handle, MessageEvent { message: b"Transfer complete" });
    }
}
